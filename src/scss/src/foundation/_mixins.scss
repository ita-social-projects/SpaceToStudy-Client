/*=============================================
=                 #MIXINS                     =
=============================================*/

/**
 *
 * Helpful reusable functions-like code that will be used to implement
 * styles for components
 *
 */

/*=============================================
 =                @media rules                =
 =============================================*/

/**
  *
  * Set of mixins for different screen resolutions
  *
  * example usage: @include tablet { color: $pink }
  */

@mixin tablet {
    @media (min-width: map-get($breakpoints, "tablet")) {
        @content;
    }
}

@mixin desktop {
    @media (min-width: map-get($breakpoints, "desktop")) {
        @content;
    }
}

@mixin mobile {
    @media (min-width: map-get($breakpoints, "mobile")) {
        @content;
    }
}

/*=============================================
=                 Spacings                    =
=============================================*/

/**
 * Function which returns values for spacing according to our design system. For your understanding,
 * you can multiply value to 4 to get value in px
 *
 * $value is expected to be a plain integer without unit name => 1; 2; 4;
 * 
 * Example usage:
 * margin: spacing(2) => margin: 0.5rem // 8px
 * padding-right: spacing(1) => padding-right: 0.25rem // 4px
 */

@function spacing($value: 1) {
    @if $value != round($value) {
        @error "#{$value} is not a valid property. Expected an plain integer.";
    }
    @return $spacing-scale-factor * $value;
}

/*=============================================
=              Containers sizings            =
=============================================*/

/**
 * defines width and height in one go
 * 
 * @include box(1rem, 2rem) => width: 1rem;  height: 2rem
 * @include box(1rem) => width: 1rem; height 1rem;
 */

@mixin box($width, $height: $width) {
    width: $width;
    height: $height;
}

/*=============================================
=               FLEX/GRID Toolkit            =
=============================================*/

/**
 * Setup for flexbox container
 *
 * example usage: 
 * @include flexbox(column, space-between) - if you want to change values in their order in function
 * @include flexbox($justify: center) - if you want to change specific values, in random order
 *
 */

@mixin flexbox($direction: row, $justify: center, $align: center, $wrap: nowrap, $gap: normal) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
    flex-wrap: $wrap;
    gap: $gap;
}

/**
 * Setup for grid container
 *    
 * @include grid(1fr 1fr, 30px, start, center); - if you want to change values in their order in function
 * @include grid($justify: center) - if you want to change specific values, in random order
 *
 */

@mixin grid($columns: auto, $rows: auto, $gap: map-get($spacing, "none"), $justify: center, $align: center) {
    display: grid;
    grid-template-columns: $columns;
    grid-template-rows: $rows;
    gap: $gap;
    justify-items: $justify;
    align-items: $align;
}

/*=============================================
=            Text manipulations            =
=============================================*/

/**
 * This mixin is used to truncate text that overflows its container.
 * 
 * To truncate text on the 1 row: @include text-truncate; => 'Some text...'
 * To truncate text on the 2 row: @include text-truncate(2); => 'Some text with meaning
 *                                                               and its continue....'
 * 
 */

@mixin text-truncate($line-clamp: 1) {
    @if $line-clamp != round($line-clamp) {
        @error "#{$line-clamp} is not a valid property. Expected an plain integer.";
    }
    display: -webkit-box;
    -webkit-line-clamp: $line-clamp; // value is: integer;
    -webkit-box-orient: vertical;
}

/**
 * This mixin is used to set up all font configuration in one go
 * 
 * Example usage:
 * @include font-setup-rubik(h1, $white, regular, base, 2xs) => 
 *      { 
 *          font-family: "Rubik, -apple-system, Arial, sans-serif"; 
 *          color: #ffffff;
 *          font-size: 4.5rem; // 72px
 *          font-weight: 400;
 *          line-height: 1.5rem; // 24px
 *          letter-spacing: 0.006rem; // 0.1px
 *      }
 *
 * @include font-setup-rubik($color: $success-50) => font-family: "Rubik, -apple-system, Arial, sans-serif"; color: #ebf3eb;
 * 
 */

@mixin font-setup-rubik(
    $font-size: false,
    $color: false,
    $font-weight: false,
    $line-height: false,
    $letter-spacing: false
) {
    font-family: $rubik;
    @if $font-size {
        $all-font-sizes: map-merge($fs, $fs-h);
        $extracted-font-size: map-get($all-font-sizes, $font-size);

        font-size: $extracted-font-size;
    }
    @if $color {
        color: $color;
    }
    @if $font-weight {
        $extracted-font-weight: map-get($fw, $font-weight);

        font-weight: $extracted-font-weight;
    }
    @if $line-height {
        $all-line-heights: map-merge($lh, $lh-h);
        $extracted-line-height: map-get($all-line-heights, $line-height);

        line-height: $extracted-line-height;
    }
    @if $letter-spacing {
        $all-letter-spacings: map-merge($ls, $ls-h);
        $extracted-letter-spacing: map-get($all-letter-spacings, $letter-spacing);

        letter-spacing: $extracted-letter-spacing;
    }
}

/*=============================================
=                Useful resets               =
=============================================*/

/**
 * mixin is used to reset the margin, padding, and list-style of the <ul> element.
 *
 * example usage: @include listReset;
 *
 */

@mixin list-reset {
    margin: 0;
    padding: 0;
    list-style: none;
}

/**
 * mixin is applied to create a clearfix, ensuring that it contains floated elements properly.
 *
 * example usage: @include clearFix;
 *
 */

@mixin clearfix($content: "") {
    &:before,
    &:after {
        content: $content;
        display: table;
    }
    &:after {
        clear: both;
    }
}
